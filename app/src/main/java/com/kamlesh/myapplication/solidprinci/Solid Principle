SOLID Principles

SOLID is an acronym for five principles that help software developers design maintainable and scalable code.

Single Responsibility Principle (SRP)

Open/Closed Principle (OCP)

Liskov Substitution Principle (LSP)

Interface Segregation Principle (ISP)

Dependency Inversion Principle (DIP)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

01. Single Responsibility Principle (SRP):

A class should have one, and only one, reason to change.

In other words, a class should have only one job. If a class has more than one responsibility, it becomes coupled.
A change to one responsibility results to modification of the other responsibility. This can introduce bugs and make the code harder to maintain.

Example:

class User {
    public function create() {
        // create user
    }

    public function delete() {
        // delete user
    }

    public function sendEmail() {
        // send email
    }
}

In the above example, the User class has three responsibilities: create, delete, and sendEmail.
If we need to change the email content, we have to modify the User class. This violates the Single Responsibility Principle.

To fix this, we can create a separate Email class:

class Email {
    public function send() {
        // send email
    }
}

class User {
    public function create() {
        // create user
    }

    public function delete() {
        // delete user
    }
}

Now, the User class has only two responsibilities: create and delete. The email sending functionality is moved to the Email class.

02. Open/Closed Principle (OCP):

Software entities should be open for extension, but closed for modification.

In other words, you should be able to add new functionality to an object or module without altering its structure.

Example:

class Circle {
    public function calculateArea($radius) {
        return 3.14 * $radius * $radius;
    }
}

class Square {
    public function calculateArea($side) {
        return $side * $side;
    }
}

If we want to add a new shape, such as a Rectangle, we have to modify the existing classes:

class Rectangle {
    public function calculateArea($length, $width) {
        return $length * $width;
    }
}

This violates the Open/Closed Principle because we have to modify the existing classes to add new functionality.

To fix this, we can use an interface:

interface Shape {
    public function calculateArea();
}

class Circle implements Shape {
    public function calculateArea($radius) {
        return 3.14 * $radius * $radius;
    }
}

class Square implements Shape {
    public function calculateArea($side) {
        return $side * $side;
    }
}

class Rectangle implements Shape {
    public function calculateArea($length, $width) {
        return $length * $width;
    }
}


Now, we can add new shapes without modifying the existing classes:

class Triangle implements Shape {
    public function calculateArea($base, $height) {
        return 0.5 * $base * $height;
    }
}

03. Liskov Substitution Principle (LSP):

Objects of a superclass should be replaceable with objects of its subclasses without affecting the functionality of the program.

In other words, a subclass should override the parent class methods in a way that does not break the functionality from a client’s point of view.

Example:

class Bird {
    public function fly() {
        // fly
    }
}

class Duck extends Bird {
    public function fly() {
        throw new Exception('Ducks cannot fly');
    }
}

In the above example, the Duck class violates the Liskov Substitution Principle because it changes the behavior of the fly method.

To fix this, we can create a separate interface for birds that can fly:

interface Flyable {
    public function fly();
}

class Bird implements Flyable {
    public function fly() {
        // fly
    }
}

class Duck implements Flyable {
    public function fly() {
        throw new Exception('Ducks cannot fly');
    }
}

Now, the Duck class does not have to implement the fly method, and it does not violate the Liskov Substitution Principle.


04. Interface Segregation Principle (ISP):

A client should never be forced to implement an interface that it doesn’t use or clients shouldn’t be forced to depend on methods they do not use.

In other words, a class should not be forced to implement interfaces it does not use.

Example:

interface Worker {
    public function work();
    public function eat();
}

class Human implements Worker {
    public function work() {
        // work
    }

    public function eat() {
        // eat
    }
}

class Robot implements Worker {
    public function work() {
        // work
    }

    public function eat() {
        throw new Exception('Robots do not eat');
    }
}

In the above example, the Robot class violates the Interface Segregation Principle because it implements the eat method, which it does not use.

To fix this, we can create separate interfaces for work and eat:

interface Workable {
    public function work();
}

interface Eatable {
    public function eat();
}

class Human implements Workable, Eatable {
    public function work() {
        // work
    }

    public function eat() {
        // eat
    }
}

class Robot implements Workable {
    public function work() {
        // work
    }
}


Now, the Robot class does not have to implement the eat method, and it does not violate the Interface Segregation Principle.

05. Dependency Inversion Principle (DIP):


High-level modules should not depend on low-level modules. Both should depend on abstractions.

Abstractions should not depend on details. Details should depend on abstractions.


In other words, classes should depend on abstractions, not on concrete implementations.

Example:


class MySQLConnection {
    public function connect() {
        // connect to MySQL database
    }
}

class PasswordReminder {
    private $dbConnection;

    public function __construct(MySQLConnection $dbConnection) {
        $this->dbConnection = $dbConnection;
    }
}

In the above example, the PasswordReminder class depends on the MySQLConnection class, which is a concrete implementation.

To fix this, we can create an interface for database connections:

interface DBConnection {
    public function connect();
}

class MySQLConnection implements DBConnection {
    public function connect() {
        // connect to MySQL database
    }
}

class PasswordReminder {
    private $dbConnection;

    public function __construct(DBConnection $dbConnection) {
        $this->dbConnection = $dbConnection;
    }
}

Now, the PasswordReminder class depends on the DBConnection interface, not on the MySQLConnection class.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

